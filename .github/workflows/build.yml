name: Build Cross-Platform Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    name: Build ${{ matrix.os }} Binary
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            script: build:win
            binary: bin/WinKeyServer.exe
            artifact: windows-binary
          - os: macos-latest
            script: build:swift
            binary: bin/MacKeyServer
            artifact: macos-binary
          - os: ubuntu-latest
            script: build:x11
            binary: bin/X11KeyServer
            artifact: linux-binary
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxi-dev build-essential
      
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # MinGW should be available by default on windows-latest
          where gcc || echo "GCC not found, installing..."
      
      - name: Build binary
        run: npm run ${{ matrix.script }}
      
      - name: Verify binary exists
        run: |
          if [ -f "${{ matrix.binary }}" ]; then
            echo "‚úÖ Binary built successfully: ${{ matrix.binary }}"
            ls -la ${{ matrix.binary }}
          else
            echo "‚ùå Binary not found: ${{ matrix.binary }}"
            exit 1
          fi
        shell: bash
      
      - name: Test binary (basic check)
        if: matrix.os != 'windows-latest'
        run: |
          file ${{ matrix.binary }}
          # For macOS, check if it's a universal binary
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            lipo -info ${{ matrix.binary }} || echo "Not a fat binary"
          fi
        shell: bash
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.binary }}
          retention-days: 30

  package-binaries:
    name: Package Binaries for Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Package binaries
        run: |
          mkdir -p releases/

          # Package macOS binary (universal)
          cd artifacts/macos-binary/
          tar -czf ../../releases/keyspy-darwin-arm64.tar.gz MacKeyServer
          tar -czf ../../releases/keyspy-darwin-x64.tar.gz MacKeyServer
          cd ../../

          # Package Linux binary
          cd artifacts/linux-binary/
          tar -czf ../../releases/keyspy-linux-x64.tar.gz X11KeyServer
          cd ../../

          # Package Windows binary
          cd artifacts/windows-binary/
          tar -czf ../../releases/keyspy-win32-x64.tar.gz WinKeyServer.exe
          cd ../../

          echo "üì¶ Packaged releases:"
          ls -la releases/

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            releases/keyspy-darwin-arm64.tar.gz
            releases/keyspy-darwin-x64.tar.gz
            releases/keyspy-linux-x64.tar.gz
            releases/keyspy-win32-x64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


